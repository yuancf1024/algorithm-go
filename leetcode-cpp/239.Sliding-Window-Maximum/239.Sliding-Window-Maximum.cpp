/**
 * @file 239.Sliding-Window-Maximum.cpp
 * @author your name (you@domain.com)
 * @brief 
 * @version 0.1
 * @date 2022-08-21
 * 
 * @copyright Copyright (c) 2022
 * leetcode-239.滑动窗口最大值
 * 
给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的
最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。
滑动窗口每次只向右移动一位。

返回 滑动窗口中的最大值 。

示例 1：

输入：nums = [1,3,-1,-3,5,3,6,7], k = 3
输出：[3,3,5,5,6,7]
解释：
滑动窗口的位置                最大值
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7

示例 2：
输入：nums = [1], k = 1
输出：[1]

提示：

1 <= nums.length <= 105
-104 <= nums[i] <= 104
1 <= k <= nums.length

 */

// 方法一：优先队列
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        int n = nums.size();
        priority_queue<pair<int, int>> q;
        for (int i = 0; i < k; ++i) { // 第一个窗口的k个元素入队
            q.emplace(nums[i], i);
        }

        vector<int> ans = {q.top().first};
        for (int i = k; i < n; ++i) {
            q.emplace(nums[i], i); // 滑动1步，添加1个元素进入q
            while (q.top().second <= i-k) { // 如果堆顶不在新的窗口范围内
                q.pop(); // 堆顶出队
            }
            ans.push_back(q.top().first); // 将此时的堆顶加入答案
        }
        return ans;
    }
};

// 方法二：单调队列
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        int n = nums.size();
        deque<int> q;
        for (int i = 0; i < k; ++i) {
            while (!q.empty() && nums[i] >= nums[q.back()]) { // 新的元素大于队尾的元素，队尾出队&&新的元素入队
                q.pop_back();
            }
            q.push_back(i);
        }

        vector<int> ans = {nums[q.front()]};
        for (int i = k; i < n; ++i) { 
            while (!q.empty() && nums[i] >= nums[q.back()]) { // 新的元素大于队尾的元素，队尾出队&&新的元素入队
                q.pop_back();
            }
            q.push_back(i); // // 滑动1步，添加1个元素进入q
            while (q.front() <= i-k) { // 队头不在新的窗口中时
                q.pop_front(); // 对头出队
            }
            ans.push_back(nums[q.front()]); // 将队头添加进答案
        }
        return ans;
    }
};

/**
 * @brief
 * 前言
对于每个滑动窗口，我们可以使用O(k) 的时间遍历其中的每一个元素，
找出其中的最大值。对于长度为n 的数组nums 而言，
窗口的数量为n−k+1，因此该算法的时间复杂度为 O((n−k+1)k)=O(nk)，
会超出时间限制，因此我们需要进行一些优化。

我们可以想到，对于两个相邻（只差了一个位置）的滑动窗口，
它们共用着k−1 个元素，而只有1 个元素是变化的。我们可以根据这个特点进行优化。

方法一：优先队列
思路与算法

对于「最大值」，我们可以想到一种非常合适的数据结构，
那就是优先队列（堆），其中的大根堆可以帮助我们实时维护一系列元素中的最大值。

对于本题而言，初始时，我们将数组nums 的前k个元素放入优先队列中。
每当我们向右移动窗口时，我们就可以把一个新的元素放入优先队列中，
此时堆顶的元素就是堆中所有元素的最大值。
然而这个最大值可能并不在滑动窗口中，
在这种情况下，这个值在数组nums 中的位置出现在滑动窗口左边界的左侧。
因此，当我们后续继续向右移动窗口时，这个值就永远不可能出现在滑动窗口中了，
我们可以将其永久地从优先队列中移除。

我们不断地移除堆顶的元素，直到其确实出现在滑动窗口中。
此时，堆顶元素就是滑动窗口中的最大值。
为了方便判断堆顶元素与滑动窗口的位置关系，
我们可以在优先队列中存储二元组 (num,index)，
表示元素 num 在数组中的下标为index。

复杂度分析
时间复杂度：O(nlogn)，其中n 是数组nums 的长度。
在最坏情况下，数组nums 中的元素单调递增，
那么最终优先队列中包含了所有元素，没有元素被移除。
由于将一个元素放入优先队列的时间复杂度为O(logn)，
因此总时间复杂度为O(nlogn)。

空间复杂度：O(n)，即为优先队列需要使用的空间。
这里所有的空间复杂度分析都不考虑返回的答案需要的O(n) 空间，
只计算额外的空间使用。


方法二：单调队列
思路与算法

我们可以顺着方法一的思路继续进行优化。

由于我们需要求出的是滑动窗口的最大值，
如果当前的滑动窗口中有两个下标i和j，其中i在j的左侧（i<j），
并且i对应的元素不大于j对应的元素（nums[i]≤nums[j]），那么会发生什么呢？

当滑动窗口向右移动时，只要i 还在窗口中，那么j 一定也还在窗口中，
这是i在j的左侧所保证的。因此，由于 nums[j] 的存在，
nums[i] 一定不会是滑动窗口中的最大值了，我们可以将nums[i] 永久地移除。

因此我们可以使用一个队列存储所有还没有被移除的下标。
在队列中，这些下标按照从小到大的顺序被存储，并且它们在数组nums 中对应的值
是严格单调递减的。因为如果队列中有两个相邻的下标，
它们对应的值相等或者递增，那么令前者为i，后者为j，就对应了上面所说的情况，
即nums[i] 会被移除，这就产生了矛盾。

当滑动窗口向右移动时，我们需要把一个新的元素放入队列中。
为了保持队列的性质，我们会不断地将新的元素与队尾的元素相比较，
如果前者大于等于后者，那么队尾的元素就可以被永久地移除，
我们将其弹出队列。我们需要不断地进行此项操作，
直到队列为空或者新的元素小于队尾的元素。

由于队列中下标对应的元素是严格单调递减的，
因此此时队首下标对应的元素就是滑动窗口中的最大值。
但与方法一中相同的是，此时的最大值可能在滑动窗口左边界的左侧，
并且随着窗口向右移动，它永远不可能出现在滑动窗口中了。
因此我们还需要不断从队首弹出元素，直到队首元素在窗口中为止。

为了可以同时弹出队首和队尾的元素，我们需要使用双端队列。
满足这种单调性的双端队列一般称作「单调队列」。

代码

复杂度分析

时间复杂度：O(n)，其中n是数组nums的长度。每一个下标恰好被放入队列一次，
并且最多被弹出队列一次，因此时间复杂度为O(n)。

空间复杂度：O(k)。与方法一不同的是，在方法二中我们使用的数据结构是双向的，
因此「不断从队首弹出元素」保证了队列中最多不会有超过k+1个元素，
因此队列使用的空间为O(k)。
 */