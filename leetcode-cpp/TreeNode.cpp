/**
 * @brief 二叉树的基础知识
 *
 * 1 满二叉树：如果一棵二叉树只有度为0的结点和度为2的结点，
 * 并且度为0的结点在同一层上，则这棵二叉树为满二叉树。
 *
 * 2 完全二叉树：在完全二叉树中，除了最底层节点可能没填满外，
 * 其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的
 * 若干位置。若最底层为第 h 层，则该层包含 1~ 2^(h-1)  个节点。
 *
 * 完全二叉树任意两个叶子节点的层数不超过1.
 *
 * 3 二叉搜索树是一个有序树。
- 若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；
- 若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；
- 它的左、右子树也分别为二叉排序树

4 平衡二叉搜索树：又被称为AVL（Adelson-Velsky and Landis）树，
且具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，
并且左右两个子树都是一棵平衡二叉树。

C++中map、set、multimap，multiset的底层实现都是平衡二叉搜索树，
所以map、set的增删操作时间时间复杂度是logn，
注意我这里没有说unordered_map、unordered_set，
unordered_map、unordered_map底层实现是哈希表。

5 二叉树的存储方式

- 链式存储：指针
链式存储则是通过指针把分布在散落在各个地址的节点串联一起。

- 顺序存储: 数组
顺序存储的元素在内存是连续分布的。

如果父节点的数组下标是 i，
那么它的左孩子就是 i * 2 + 1，右孩子就是 i * 2 + 2。

6 二叉树的遍历方式

二叉树主要有两种遍历方式：

- 深度优先遍历：先往深走，遇到叶子节点再往回走。
- 广度优先遍历：一层一层的去遍历。


- 深度优先遍历
    - 前序遍历（递归法，迭代法）
    - 中序遍历（递归法，迭代法）
    - 后序遍历（递归法，迭代法）
- 广度优先遍历
    - 层次遍历（迭代法）

前序遍历：中左右

中序遍历：左中右

后序遍历：左右中


 */
// 二叉树的定义
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};


