package leetcode

/* 154. 寻找旋转排序数组中的最小值 II
已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，
得到输入数组。例如，原数组 nums = [0,1,4,4,5,6,7] 在变化后可能得到：
若旋转 4 次，则可以得到 [4,5,6,7,0,1,4]
若旋转 7 次，则可以得到 [0,1,4,4,5,6,7]
注意，数组 [a[0], a[1], a[2], ..., a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], a[1], a[2], ..., a[n-2]] 。

给你一个可能存在 重复 元素值的数组 nums ，它原来是一个升序排列的数组，
并按上述情形进行了多次旋转。请你找出并返回数组中的 最小元素 。
你必须尽可能减少整个过程的操作步骤。

示例 1：
输入：nums = [1,3,5]

输出：1

示例 2：
输入：nums = [2,2,2,0,1]

输出：0
 
提示：
n == nums.length
1 <= n <= 5000
-5000 <= nums[i] <= 5000
nums 原来是一个升序排序的数组，并进行了 1 至 n 次旋转
*/

func findMin154(nums []int) int {
	low, high := 0, len(nums)-1
	for low < high {
		if nums[low] < nums[high] { // 此时数组为升序，输出第一个元素即可
			return nums[low]
		}
		mid := low + ((high - low) >> 1)
		if nums[mid] > nums[low] { // 说明mid处的值还没有达到最大，mid在最小值的左边，向右缩小左边界
			low = mid + 1
		} else if nums[mid] == nums[low] {
			low++
		} else { // 说明mid在最小值的右边，此刻向左收缩右边界
			high = mid
		}
	}
	return nums[low]
}

/* 使用leetcode-153的代码 ，用二分来查找最小值，可以通过大多数案例 
通过测试用例：187 / 193
但是存在多个相同元素的特殊case，通不过
输入：
[10,1,10,10,10]
输出：
10

解题思路
- 给出一个原本从小到大排序过的数组，注意数组中有重复的元素。
但是在某一个分割点上，把数组切分后的两部分对调位置，数值偏大的放到了
数组的前部。求这个数组中最小的元素。


- 这一题是第 153 题的加强版，增加了重复元素的条件。
**但是实际做法还是没有变，还是用二分搜索，只不过在相等元素上
多增加一个判断即可**。时间复杂度 O(log n)。

*/